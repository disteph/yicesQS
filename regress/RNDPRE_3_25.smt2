(set-info :smt-lib-version 2.6)
(set-logic BV)
(set-info :source |
   Scholl, Christoph; Disch, Stefan; Pigorsch, Florian and Kupferschmid, 
   Stefan; Using an SMT Solver and Craig Interpolation to Detect and Remove 
   Redundant Linear Constraints in Representations of Non-Convex Polyhedra.
   Proceedings of 6th International Workshop on Satisfiability Modulo
   Theories, Princeton, USA, July 2008.
   <http://abs.informatik.uni-freiburg.de/smtbench/>

Translated to BV by Mathias Preiner.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)
(declare-fun x1 () (_ BitVec 32))
(declare-fun x2 () (_ BitVec 32))
(declare-fun x3 () (_ BitVec 32))
(assert (exists ((?x1 (_ BitVec 32))) (forall ((?x2 (_ BitVec 32))) (exists ((?x3 (_ BitVec 32))) (let ((?v_0 (bvmul (_ bv1 32) ?x2)) (?v_3 (bvmul (_ bv46 32) ?x3)) (?v_5 (bvmul (_ bv55 32) ?x3)) (?v_1 (bvmul (_ bv66 32) ?x1)) (?v_4 (bvmul (bvneg (_ bv73 32)) ?x3)) (?v_2 (bvmul (bvneg (_ bv41 32)) ?x3))) (or (and (and (and (and (bvslt (bvadd (bvmul (bvneg (_ bv53 32)) ?x2) (bvmul (bvneg (_ bv56 32)) ?x3)) (_ bv79 32)) (= (bvadd (bvmul (_ bv62 32) ?x1) (bvmul (_ bv34 32) ?x3)) (bvneg (_ bv54 32)))) (or (or (not (= (bvmul (bvneg (_ bv27 32)) ?x3) (_ bv12 32))) (bvsge (bvadd (bvmul (bvneg (_ bv91 32)) ?x1) (bvmul (bvneg (_ bv61 32)) ?x3)) (_ bv25 32))) (bvsgt (bvadd (bvmul (_ bv51 32) ?x1) (bvmul (_ bv22 32) ?x2)) (bvneg (_ bv49 32))))) (or (and (or (bvslt (bvadd (bvmul (bvneg (_ bv42 32)) ?x2) (bvmul (bvneg (_ bv88 32)) ?x3)) (_ bv0 32)) (= (bvadd (bvmul (_ bv94 32) ?x1) (bvmul (bvneg (_ bv41 32)) ?x2)) (_ bv20 32))) (and (bvsle (bvadd (bvadd (bvmul (_ bv84 32) ?x1) (bvmul (_ bv79 32) ?x2)) (bvmul (_ bv42 32) ?x3)) (_ bv5 32)) (= (bvadd (bvmul (bvneg (_ bv58 32)) ?x2) (bvmul (bvneg (_ bv13 32)) ?x3)) (bvneg (_ bv1 32))))) (or (= (bvadd (bvmul (_ bv61 32) ?x1) (bvmul (bvneg (_ bv26 32)) ?x3)) (bvneg (_ bv18 32))) (and (bvsge (bvadd (bvmul (_ bv91 32) ?x1) (bvmul (bvneg (_ bv93 32)) ?x2)) (_ bv58 32)) (bvsle (bvadd (bvmul (bvneg (_ bv68 32)) ?x2) (bvmul (_ bv88 32) ?x3)) (_ bv74 32)))))) (or (and (or (bvslt (bvadd (bvadd (bvmul (bvneg (_ bv47 32)) ?x1) ?v_0) (bvmul (bvneg (_ bv42 32)) ?x3)) (_ bv61 32)) (and (not (= (bvadd (bvadd (bvmul (_ bv38 32) ?x1) (bvmul (bvneg (_ bv80 32)) ?x2)) ?v_3) (_ bv48 32))) (bvslt (bvadd (bvmul (_ bv35 32) ?x1) (bvmul (bvneg (_ bv91 32)) ?x3)) (_ bv0 32)))) (and (bvslt (bvmul (bvneg (_ bv80 32)) ?x1) (_ bv25 32)) (bvsgt (bvadd (bvmul (bvneg (_ bv66 32)) ?x1) ?v_4) (bvneg (_ bv19 32))))) (and (and (or (bvsle (bvadd (bvmul (bvneg (_ bv4 32)) ?x1) (bvmul (bvneg (_ bv22 32)) ?x3)) (bvneg (_ bv28 32))) (not (= (bvadd ?v_0 (bvmul (_ bv20 32) ?x3)) (bvneg (_ bv63 32))))) (and (= (bvadd (bvmul (_ bv13 32) ?x2) (bvmul (bvneg (_ bv7 32)) ?x3)) (_ bv0 32)) (bvslt (bvadd (bvadd (bvmul (_ bv87 32) ?x1) (bvmul (bvneg (_ bv36 32)) ?x2)) ?v_5) (bvneg (_ bv98 32))))) (or (or (not (= (bvadd (bvadd (bvmul (_ bv73 32) ?x1) (bvmul (bvneg (_ bv15 32)) ?x2)) (bvmul (_ bv52 32) ?x3)) (_ bv72 32))) (bvsle ?v_1 (_ bv47 32))) (or (bvsge (bvadd (bvmul (_ bv82 32) ?x2) (bvmul (_ bv69 32) ?x3)) (_ bv10 32)) (= (bvadd (bvadd ?v_1 (bvmul (_ bv4 32) ?x2)) (bvmul (_ bv21 32) ?x3)) (_ bv77 32))))))) (and (or (or (or (and (= (bvadd (bvadd (bvmul (_ bv33 32) ?x1) (bvmul (_ bv84 32) ?x2)) (bvmul (bvneg (_ bv36 32)) ?x3)) (_ bv0 32)) (bvsgt (bvadd (bvadd (bvmul (_ bv7 32) ?x1) (bvmul (bvneg (_ bv79 32)) ?x2)) (bvmul (bvneg (_ bv100 32)) ?x3)) (_ bv0 32))) (or (bvslt (bvadd (bvmul (_ bv57 32) ?x1) ?v_2) (_ bv40 32)) (bvsge (bvadd (bvmul (_ bv18 32) ?x2) (bvmul (bvneg (_ bv64 32)) ?x3)) (_ bv16 32)))) (and (or (not (= (bvadd (bvadd (bvmul (bvneg (_ bv19 32)) ?x1) (bvmul (bvneg (_ bv74 32)) ?x2)) (bvmul (_ bv40 32) ?x3)) (bvneg (_ bv6 32)))) (bvslt (bvadd (bvmul (bvneg (_ bv86 32)) ?x1) (bvmul (bvneg (_ bv83 32)) ?x3)) (_ bv94 32))) (or (bvsgt (bvmul (bvneg (_ bv69 32)) ?x3) (_ bv0 32)) (bvsge (bvadd (bvadd (bvmul (_ bv16 32) ?x1) (bvmul (bvneg (_ bv18 32)) ?x2)) (bvmul (bvneg (_ bv92 32)) ?x3)) (bvneg (_ bv32 32)))))) (or (and (and (not (= (bvadd (bvmul (_ bv11 32) ?x1) (bvmul (_ bv75 32) ?x2)) (_ bv57 32))) (not (= (bvadd (bvadd (bvmul (bvneg (_ bv90 32)) ?x1) (bvmul (_ bv48 32) ?x2)) (bvmul (bvneg (_ bv94 32)) ?x3)) (bvneg (_ bv45 32))))) (or (bvsge (bvadd (bvadd (bvmul (_ bv36 32) ?x1) (bvmul (_ bv67 32) ?x2)) (bvmul (_ bv11 32) ?x3)) (bvneg (_ bv8 32))) (bvsge (bvadd (bvmul (_ bv75 32) ?x1) (bvmul (bvneg (_ bv65 32)) ?x3)) (_ bv34 32)))) (and (bvsle (bvmul (bvneg (_ bv7 32)) ?x1) (_ bv0 32)) (and (= (bvadd (bvmul (_ bv44 32) ?x1) ?v_2) (_ bv0 32)) (bvslt (bvadd (bvadd (bvmul (_ bv27 32) ?x1) (bvmul (bvneg (_ bv24 32)) ?x2)) (bvmul (_ bv89 32) ?x3)) (bvneg (_ bv17 32))))))) (and (and (bvsge (bvadd (bvmul (_ bv5 32) ?x1) (bvmul (bvneg (_ bv33 32)) ?x2)) (bvneg (_ bv32 32))) (and (bvsle (bvadd (bvmul (_ bv77 32) ?x1) ?v_3) (_ bv51 32)) (bvslt (bvadd (bvmul (_ bv79 32) ?x1) ?v_0) (bvneg (_ bv86 32))))) (and (or (or (bvsge (bvadd (bvadd (bvmul (bvneg (_ bv46 32)) ?x1) (bvmul (_ bv11 32) ?x2)) (bvmul (bvneg (_ bv54 32)) ?x3)) (_ bv37 32)) (bvslt (bvadd (bvmul (_ bv39 32) ?x2) (bvmul (bvneg (_ bv96 32)) ?x3)) (_ bv0 32))) (or (= ?v_4 (_ bv50 32)) (bvslt (bvmul (bvneg (_ bv2 32)) ?x1) (_ bv0 32)))) (and (or (not (= (bvadd (bvadd (bvmul (bvneg (_ bv96 32)) ?x1) (bvmul (_ bv59 32) ?x2)) ?v_5) (bvneg (_ bv24 32)))) (bvsge (bvadd (bvadd (bvmul (bvneg (_ bv74 32)) ?x1) (bvmul (_ bv31 32) ?x2)) (bvmul (_ bv83 32) ?x3)) (bvneg (_ bv95 32)))) (bvsge (bvmul (bvneg (_ bv70 32)) ?x3) (_ bv0 32))))))))))))
(check-sat)
(exit)
