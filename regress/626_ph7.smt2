(set-info :smt-lib-version 2.6)
(set-logic BV)
(set-info :source |
Generated by: Nuno Lopes
Generated on: 2021-03-01
Generator: Alive2
Target solver: Z3

Alive2 compiler optimization refinement query [1].

[1] "Alive2: Bounded Translation Validation for LLVM", PLDI'21.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun undef!15 () (_ BitVec 32))
(declare-fun isundef_%nKeyID () (_ BitVec 32))
(declare-fun %nKeyID () (_ BitVec 32))
(declare-fun undef!17 () (_ BitVec 32))
(declare-fun undef!18 () (_ BitVec 32))
(declare-fun undef!19 () (_ BitVec 32))
(declare-fun undef!20 () (_ BitVec 32))
(declare-fun undef!21 () (_ BitVec 32))
(declare-fun undef!16 () (_ BitVec 8))
(declare-fun isundef_%bCheckFunc () (_ BitVec 8))
(declare-fun %bCheckFunc () (_ BitVec 8))
(declare-fun undef!22 () (_ BitVec 32))
(declare-fun undef!23 () (_ BitVec 32))
(declare-fun undef!24 () (_ BitVec 32))
(declare-fun undef!25 () (_ BitVec 32))
(declare-fun undef!26 () (_ BitVec 32))
(declare-fun undef!27 () (_ BitVec 32))
(declare-fun undef!28 () (_ BitVec 32))
(declare-fun undef!29 () (_ BitVec 32))
(declare-fun np_%bCheckFunc () Bool)
(declare-fun np_%nKeyID () Bool)
(assert
 (forall ((undef!0 (_ BitVec 32)) (undef!1 (_ BitVec 8)) (undef!2 (_ BitVec 32)) (undef!3 (_ BitVec 32)) (undef!4 (_ BitVec 32)) (undef!5 (_ BitVec 32)) (undef!6 (_ BitVec 32)) (undef!7 (_ BitVec 32)) (undef!8 (_ BitVec 32)) (undef!9 (_ BitVec 32)) (undef!10 (_ BitVec 32)) (undef!11 (_ BitVec 32)) (undef!12 (_ BitVec 32)) (undef!13 (_ BitVec 32)) (undef!14 (_ BitVec 32)) )(let ((?x28 (bvand %nKeyID (bvnot isundef_%nKeyID))))
 (let ((?x246 (bvor ?x28 (bvand isundef_%nKeyID undef!15))))
 (let (($x243 (= (_ bv37 32) ?x246)))
 (let (($x253 (not $x243)))
 (let (($x266 (and (not (= (_ bv4 32) (bvor ?x28 (bvand isundef_%nKeyID undef!17)))) $x253)))
 (let (($x277 (and (not (= (_ bv41 32) (bvor ?x28 (bvand isundef_%nKeyID undef!18)))) $x266)))
 (let (($x288 (and (not (= (_ bv40 32) (bvor ?x28 (bvand isundef_%nKeyID undef!19)))) $x277)))
 (let (($x299 (and (not (= (_ bv10 32) (bvor ?x28 (bvand isundef_%nKeyID undef!20)))) $x288)))
 (let (($x310 (and (not (= (_ bv9 32) (bvor ?x28 (bvand isundef_%nKeyID undef!21)))) $x299)))
 (let ((?x36 (bvand %bCheckFunc (bvnot isundef_%bCheckFunc))))
 (let ((?x249 (bvor ?x36 (bvand isundef_%bCheckFunc undef!16))))
 (let (($x311 (= (_ bv0 8) ?x249)))
 (let (($x325 (and (not $x311) $x310)))
 (let (($x336 (and (not (= (_ bv43 32) (bvor ?x28 (bvand isundef_%nKeyID undef!22)))) $x325)))
 (let (($x347 (and (not (= (_ bv8192 32) (bvor ?x28 (bvand isundef_%nKeyID undef!23)))) $x336)))
 (let (($x358 (and (not (= (_ bv27 32) (bvor ?x28 (bvand isundef_%nKeyID undef!24)))) $x347)))
 (let (($x369 (and (not (= (_ bv42 32) (bvor ?x28 (bvand isundef_%nKeyID undef!25)))) $x358)))
 (let (($x380 (and (not (= (_ bv512 32) (bvor ?x28 (bvand isundef_%nKeyID undef!26)))) $x369)))
 (let (($x391 (and (not (= (_ bv15 32) (bvor ?x28 (bvand isundef_%nKeyID undef!27)))) $x380)))
 (let (($x402 (and (not (= (_ bv256 32) (bvor ?x28 (bvand isundef_%nKeyID undef!28)))) $x391)))
 (let (($x407 (= (_ bv128 32) (bvor ?x28 (bvand isundef_%nKeyID undef!29)))))
 (let (($x411 (and $x407 $x402)))
 (let (($x396 (= (_ bv256 32) (bvor ?x28 (bvand isundef_%nKeyID undef!28)))))
 (let (($x400 (and $x396 $x391)))
 (let (($x385 (= (_ bv15 32) (bvor ?x28 (bvand isundef_%nKeyID undef!27)))))
 (let (($x389 (and $x385 $x380)))
 (let (($x374 (= (_ bv512 32) (bvor ?x28 (bvand isundef_%nKeyID undef!26)))))
 (let (($x378 (and $x374 $x369)))
 (let (($x363 (= (_ bv42 32) (bvor ?x28 (bvand isundef_%nKeyID undef!25)))))
 (let (($x367 (and $x363 $x358)))
 (let (($x352 (= (_ bv27 32) (bvor ?x28 (bvand isundef_%nKeyID undef!24)))))
 (let (($x356 (and $x352 $x347)))
 (let (($x341 (= (_ bv8192 32) (bvor ?x28 (bvand isundef_%nKeyID undef!23)))))
 (let (($x345 (and $x341 $x336)))
 (let (($x330 (= (_ bv43 32) (bvor ?x28 (bvand isundef_%nKeyID undef!22)))))
 (let (($x334 (and $x330 $x325)))
 (let (($x427 (or (or (or (or (or (or (or $x334 $x345) $x356) $x367) $x378) $x389) $x400) $x411)))
 (let (($x304 (= (_ bv9 32) (bvor ?x28 (bvand isundef_%nKeyID undef!21)))))
 (let (($x308 (and $x304 $x299)))
 (let (($x293 (= (_ bv10 32) (bvor ?x28 (bvand isundef_%nKeyID undef!20)))))
 (let (($x297 (and $x293 $x288)))
 (let (($x282 (= (_ bv40 32) (bvor ?x28 (bvand isundef_%nKeyID undef!19)))))
 (let (($x286 (and $x282 $x277)))
 (let (($x271 (= (_ bv41 32) (bvor ?x28 (bvand isundef_%nKeyID undef!18)))))
 (let (($x275 (and $x271 $x266)))
 (let (($x260 (= (_ bv4 32) (bvor ?x28 (bvand isundef_%nKeyID undef!17)))))
 (let (($x264 (and $x260 $x253)))
 (let (($x439 (or (or (or (or (or $x243 $x264) $x275) $x286) $x297) $x308)))
 (let (($x414 (or $x439 $x427)))
 (let (($x605 (= (_ bv37 32) (bvor (bvand isundef_%nKeyID undef!0) ?x28))))
 (let (($x595 (not $x605)))
 (let (($x492 (and (not (= (_ bv4 32) (bvor (bvand isundef_%nKeyID undef!2) ?x28))) $x595)))
 (let (($x497 (and (not (= (_ bv41 32) (bvor (bvand isundef_%nKeyID undef!3) ?x28))) $x492)))
 (let (($x526 (and (not (= (_ bv40 32) (bvor (bvand isundef_%nKeyID undef!4) ?x28))) $x497)))
 (let (($x534 (and (not (= (_ bv10 32) (bvor (bvand isundef_%nKeyID undef!5) ?x28))) $x526)))
 (let (($x506 (and (not (= (_ bv9 32) (bvor (bvand isundef_%nKeyID undef!6) ?x28))) $x534)))
 (let (($x572 (and (not (= (_ bv0 8) (bvor (bvand isundef_%bCheckFunc undef!1) ?x36))) $x506)))
 (let (($x582 (and (not (= (_ bv43 32) (bvor (bvand isundef_%nKeyID undef!7) ?x28))) $x572)))
 (let (($x447 (and (not (= (_ bv8192 32) (bvor (bvand isundef_%nKeyID undef!8) ?x28))) $x582)))
 (let (($x623 (and (not (= (_ bv27 32) (bvor (bvand isundef_%nKeyID undef!9) ?x28))) $x447)))
 (let (($x628 (and (not (= (_ bv42 32) (bvor (bvand isundef_%nKeyID undef!10) ?x28))) $x623)))
 (let (($x633 (and (not (= (_ bv512 32) (bvor (bvand isundef_%nKeyID undef!11) ?x28))) $x628)))
 (let (($x638 (and (not (= (_ bv15 32) (bvor (bvand isundef_%nKeyID undef!12) ?x28))) $x633)))
 (let (($x643 (and (not (= (_ bv256 32) (bvor (bvand isundef_%nKeyID undef!13) ?x28))) $x638)))
 (let (($x646 (= (_ bv128 32) (bvor (bvand isundef_%nKeyID undef!14) ?x28))))
 (let (($x647 (and $x646 $x643)))
 (let (($x641 (= (_ bv256 32) (bvor (bvand isundef_%nKeyID undef!13) ?x28))))
 (let (($x648 (and $x641 $x638)))
 (let (($x636 (= (_ bv15 32) (bvor (bvand isundef_%nKeyID undef!12) ?x28))))
 (let (($x649 (and $x636 $x633)))
 (let (($x631 (= (_ bv512 32) (bvor (bvand isundef_%nKeyID undef!11) ?x28))))
 (let (($x650 (and $x631 $x628)))
 (let (($x626 (= (_ bv42 32) (bvor (bvand isundef_%nKeyID undef!10) ?x28))))
 (let (($x651 (and $x626 $x623)))
 (let (($x621 (= (_ bv27 32) (bvor (bvand isundef_%nKeyID undef!9) ?x28))))
 (let (($x652 (and $x621 $x447)))
 (let (($x613 (= (_ bv8192 32) (bvor (bvand isundef_%nKeyID undef!8) ?x28))))
 (let (($x653 (and $x613 $x582)))
 (let (($x655 (or (and (= (_ bv43 32) (bvor (bvand isundef_%nKeyID undef!7) ?x28)) $x572) $x653)))
 (let (($x661 (or (or (or (or (or (or $x655 $x652) $x651) $x650) $x649) $x648) $x647)))
 (let (($x510 (= (_ bv9 32) (bvor (bvand isundef_%nKeyID undef!6) ?x28))))
 (let (($x662 (and $x510 $x534)))
 (let (($x533 (= (_ bv10 32) (bvor (bvand isundef_%nKeyID undef!5) ?x28))))
 (let (($x663 (and $x533 $x526)))
 (let (($x530 (= (_ bv40 32) (bvor (bvand isundef_%nKeyID undef!4) ?x28))))
 (let (($x664 (and $x530 $x497)))
 (let (($x495 (= (_ bv41 32) (bvor (bvand isundef_%nKeyID undef!3) ?x28))))
 (let (($x665 (and $x495 $x492)))
 (let (($x604 (= (_ bv4 32) (bvor (bvand isundef_%nKeyID undef!2) ?x28))))
 (let (($x666 (and $x604 $x595)))
 (let (($x671 (or (or (or (or (or $x605 $x666) $x665) $x664) $x663) $x662)))
 (let (($x307 (= (= (_ bv9 32) (bvor ?x28 (bvand isundef_%nKeyID (_ bv3 32)))) $x304)))
 (let (($x296 (= (= (_ bv10 32) (bvor ?x28 (bvand isundef_%nKeyID (_ bv3 32)))) $x293)))
 (let (($x285 (= (= (_ bv40 32) (bvor ?x28 (bvand isundef_%nKeyID (_ bv3 32)))) $x282)))
 (let (($x274 (= (= (_ bv41 32) (bvor ?x28 (bvand isundef_%nKeyID (_ bv3 32)))) $x271)))
 (let (($x263 (= (= (_ bv4 32) (bvor ?x28 (bvand isundef_%nKeyID (_ bv3 32)))) $x260)))
 (let (($x254 (= $x243 (= (_ bv37 32) (bvor ?x28 (bvand isundef_%nKeyID (_ bv3 32)))))))
 (let (($x113 (and np_%nKeyID np_%bCheckFunc)))
 (let (($x323 (and (and (and (and (and (and $x113 $x254) $x263) $x274) $x285) $x296) $x307)))
 (let (($x324 (and $x323 (= $x311 (= (_ bv0 8) (bvor ?x36 (bvand isundef_%bCheckFunc (_ bv3 8))))))))
 (let (($x335 (and $x324 (= (= (_ bv43 32) (bvor ?x28 (bvand isundef_%nKeyID (_ bv3 32)))) $x330))))
 (let (($x346 (and $x335 (= (= (_ bv8192 32) (bvor ?x28 (bvand isundef_%nKeyID (_ bv3 32)))) $x341))))
 (let (($x357 (and $x346 (= (= (_ bv27 32) (bvor ?x28 (bvand isundef_%nKeyID (_ bv3 32)))) $x352))))
 (let (($x368 (and $x357 (= (= (_ bv42 32) (bvor ?x28 (bvand isundef_%nKeyID (_ bv3 32)))) $x363))))
 (let (($x379 (and $x368 (= (= (_ bv512 32) (bvor ?x28 (bvand isundef_%nKeyID (_ bv3 32)))) $x374))))
 (let (($x390 (and $x379 (= (= (_ bv15 32) (bvor ?x28 (bvand isundef_%nKeyID (_ bv3 32)))) $x385))))
 (let (($x401 (and $x390 (= (= (_ bv256 32) (bvor ?x28 (bvand isundef_%nKeyID (_ bv3 32)))) $x396))))
 (let (($x412 (and $x401 (= (= (_ bv128 32) (bvor ?x28 (bvand isundef_%nKeyID (_ bv3 32)))) $x407))))
 (let (($x413 (and (not $x407) $x402)))
 (let (($x416 (ite $x413 $x412 $x324)))
 (let (($x432 (ite $x389 $x390 (ite $x378 $x379 (ite $x367 $x368 (ite $x356 $x357 (ite $x345 $x346 $x335)))))))
 (let (($x434 (ite $x411 $x412 (ite $x400 $x401 $x432))))
 (let (($x255 (and np_%nKeyID $x254)))
 (let (($x265 (and $x255 $x263)))
 (let (($x276 (and $x265 $x274)))
 (let (($x287 (and $x276 $x285)))
 (let (($x298 (and $x287 $x296)))
 (let (($x309 (and $x298 $x307)))
 (let (($x444 (ite $x308 $x309 (ite $x297 $x298 (ite $x286 $x287 (ite $x275 $x276 (ite $x264 $x265 $x255)))))))
 (let (($x445 (ite $x439 $x444 (ite $x427 $x434 $x416))))
 (let (($x419 (or (or (or (and $x311 $x310) $x413) $x427) $x439)))
 (let (($x446 (and $x419 $x445)))
 (let (($x109 (= (_ bv0 8) (bvor (bvand isundef_%bCheckFunc (_ bv3 8)) ?x36))))
 (let (($x538 (= (_ bv0 8) (bvor (bvand isundef_%bCheckFunc undef!1) ?x36))))
 (let ((?x43 (bvand isundef_%nKeyID (_ bv3 32))))
 (let ((?x44 (bvor ?x43 ?x28)))
 (let (($x96 (= (_ bv9 32) ?x44)))
 (let (($x676 (= $x96 $x510)))
 (let (($x85 (= (_ bv10 32) ?x44)))
 (let (($x677 (= $x85 $x533)))
 (let (($x74 (= (_ bv40 32) ?x44)))
 (let (($x678 (= $x74 $x530)))
 (let (($x63 (= (_ bv41 32) ?x44)))
 (let (($x679 (= $x63 $x495)))
 (let (($x684 (and (and (and $x113 (= $x605 (= (_ bv37 32) ?x44))) (= (= (_ bv4 32) ?x44) $x604)) $x679)))
 (let (($x688 (and (and (and (and $x684 $x678) $x677) $x676) (= $x538 $x109))))
 (let (($x697 (and $x688 (= (= (_ bv43 32) ?x44) (= (_ bv43 32) (bvor (bvand isundef_%nKeyID undef!7) ?x28))))))
 (let (($x698 (and $x697 (= (= (_ bv8192 32) ?x44) $x613))))
 (let (($x699 (and $x698 (= (= (_ bv27 32) ?x44) $x621))))
 (let (($x700 (and $x699 (= (= (_ bv42 32) ?x44) $x626))))
 (let (($x701 (and $x700 (= (= (_ bv512 32) ?x44) $x631))))
 (let (($x702 (and $x701 (= (= (_ bv15 32) ?x44) $x636))))
 (let (($x703 (and $x702 (= (= (_ bv256 32) ?x44) $x641))))
 (let (($x704 (and $x703 (= (= (_ bv128 32) ?x44) $x646))))
 (let (($x706 (and (not $x646) $x643)))
 (let (($x712 (ite $x649 $x702 (ite $x650 $x701 (ite $x651 $x700 (ite $x652 $x699 (ite $x653 $x698 $x697)))))))
 (let (($x45 (= (_ bv37 32) ?x44)))
 (let (($x681 (= $x605 $x45)))
 (let (($x716 (and np_%nKeyID $x681)))
 (let (($x52 (= (_ bv4 32) ?x44)))
 (let (($x680 (= $x52 $x604)))
 (let (($x717 (and $x716 $x680)))
 (let (($x719 (and $x717 $x679)))
 (let (($x721 (and $x719 $x678)))
 (let (($x723 (and $x721 $x677)))
 (let (($x726 (ite $x662 (and $x723 $x676) (ite $x663 $x723 (ite $x664 $x721 (ite $x665 $x719 (ite $x666 $x717 $x716)))))))
 (let (($x727 (ite $x671 $x726 (ite $x661 (ite $x647 $x704 (ite $x648 $x703 $x712)) (ite $x706 $x704 $x688)))))
 (and (and (and (or (or (or (and $x538 $x506) $x706) $x661) $x671) $x727) $x446) (not (= (or $x671 $x661) $x414)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 )
(check-sat)
(exit)
